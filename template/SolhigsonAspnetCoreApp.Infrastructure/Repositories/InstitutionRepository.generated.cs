#nullable enable
using System;
using System.Linq.Expressions;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Solhigson.Framework.Infrastructure;

namespace SolhigsonAspnetCoreApp.Infrastructure.Repositories
{
    /*
     * Generated by: Solhigson.Framework.efcoretool
     *
     * https://github.com/solhigson-public/solhigson.framework
     * https://www.nuget.org/packages/solhigson.framework.efcoretool
     *
     * This file is ALWAYS overwritten, DO NOT place custom code here
     */
    public partial class InstitutionRepository : SolhigsonAspnetCoreAppCachedRepositoryBase<SolhigsonAspnetCoreApp.Domain.Entities.Institution
        ,SolhigsonAspnetCoreApp.Domain.CacheModels.InstitutionCacheModel>, 
            SolhigsonAspnetCoreApp.Infrastructure.Repositories.Abstractions.IInstitutionRepository
    {
        public InstitutionRepository(SolhigsonAspnetCoreApp.Infrastructure.AppDbContext dbContext) : base(dbContext)
        {
        }

		public virtual async Task<SolhigsonAspnetCoreApp.Domain.Entities.Institution?> GetByIdAsync(string id)
		{
			if (id is null) { return null; }

			Expression<Func<SolhigsonAspnetCoreApp.Domain.Entities.Institution, bool>> query = 
				t => t.Id == id;
			return await Where(query).FirstOrDefaultAsync();
		}

		public virtual async Task<TK?> GetByIdAsync<TK>(string id) where TK : class
		{
			if (id is null) { return null; }

			Expression<Func<SolhigsonAspnetCoreApp.Domain.Entities.Institution, bool>> query = 
				t => t.Id == id;
			return await Where<TK>(query).FirstOrDefaultAsync();
		}

		public virtual async Task<SolhigsonAspnetCoreApp.Domain.Entities.Institution?> GetByNameAsync(string name)
		{
			if (name is null) { return null; }

			Expression<Func<SolhigsonAspnetCoreApp.Domain.Entities.Institution, bool>> query = 
				t => t.Name == name;
			return await Where(query).FirstOrDefaultAsync();
		}

		public virtual async Task<TK?> GetByNameAsync<TK>(string name) where TK : class
		{
			if (name is null) { return null; }

			Expression<Func<SolhigsonAspnetCoreApp.Domain.Entities.Institution, bool>> query = 
				t => t.Name == name;
			return await Where<TK>(query).FirstOrDefaultAsync();
		}


		//Cached Methods
		public virtual async Task<SolhigsonAspnetCoreApp.Domain.CacheModels.InstitutionCacheModel?> GetByIdCachedAsync(string id)
		{
			if (id is null) { return null; }

			Expression<Func<SolhigsonAspnetCoreApp.Domain.Entities.Institution, bool>> query = 
				t => t.Id == id;
			return await GetSingleCachedAsync(query);
		}

		public virtual async Task<TK?> GetByIdCachedAsync<TK>(string id) where TK : class
		{
			if (id is null) { return null; }

			Expression<Func<SolhigsonAspnetCoreApp.Domain.Entities.Institution, bool>> query = 
				t => t.Id == id;
			return await GetSingleCachedAsync<TK>(query);
		}

		public virtual async Task<SolhigsonAspnetCoreApp.Domain.CacheModels.InstitutionCacheModel?> GetByNameCachedAsync(string name)
		{
			if (name is null) { return null; }

			Expression<Func<SolhigsonAspnetCoreApp.Domain.Entities.Institution, bool>> query = 
				t => t.Name == name;
			return await GetSingleCachedAsync(query);
		}

		public virtual async Task<TK?> GetByNameCachedAsync<TK>(string name) where TK : class
		{
			if (name is null) { return null; }

			Expression<Func<SolhigsonAspnetCoreApp.Domain.Entities.Institution, bool>> query = 
				t => t.Name == name;
			return await GetSingleCachedAsync<TK>(query);
		}


    }
}